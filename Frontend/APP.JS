// R√©cup√©ration des √©l√©ments du DOM
const form = document.getElementById("todo-form");      // Formulaire d'ajout de t√¢che
const input = document.getElementById("todo-input");    // Champ texte pour nouvelle t√¢che
const list = document.getElementById("todo-list");      // Liste UL o√π afficher les t√¢ches
const filters = document.querySelectorAll(".filters button");  // Boutons de filtre (Toutes, En cours, Termin√©es)

// R√©cup√©ration des t√¢ches enregistr√©es dans le localStorage ou initialisation √† tableau vide
let todos = JSON.parse(localStorage.getItem("todos")) || [];

// Fonction pour sauvegarder la liste des t√¢ches dans localStorage
function saveTodos() {
  localStorage.setItem("todos", JSON.stringify(todos));
}

// Fonction pour afficher les t√¢ches selon le filtre choisi (all, active, completed)
function renderTodos(filter = "all") {
  list.innerHTML = ""; // Vider la liste avant affichage

  todos
    .filter(todo => {
      if (filter === "all") return true;
      if (filter === "active") return !todo.completed;      // T√¢ches non termin√©es
      if (filter === "completed") return todo.completed;    // T√¢ches termin√©es
    })
    .forEach((todo, index) => {
      const li = document.createElement("li");             // Cr√©er un √©l√©ment li pour chaque t√¢che

      // Cr√©ation du texte de la t√¢che
      const span = document.createElement("span");
      span.textContent = todo.text;
      if (todo.completed) span.classList.add("completed");  // Style t√¢che termin√©e

      // Cliquer sur le texte pour changer le statut termin√©/en cours
      span.addEventListener("click", () => {
        todos[index].completed = !todos[index].completed;
        saveTodos();
        renderTodos(filter);
      });

      // üîß Bouton Modifier
      const editBtn = document.createElement("button");
      editBtn.textContent = "Modifier";
      editBtn.title = "Modifier";
      editBtn.style.border = "none";
      editBtn.style.background = "none";
      editBtn.style.cursor = "pointer";
      editBtn.addEventListener("click", (e) => {
        e.stopPropagation();  // Emp√™che le clic de se propager au span
        editTask(span, index, filter);
      });

      // üóëÔ∏è Bouton Supprimer
      const del = document.createElement("button");
      del.textContent = "Supprimer";
      del.title = "Supprimer";
      del.style.border = "none";
      del.style.background = "none";
      del.style.cursor = "pointer";
      del.addEventListener("click", (e) => {
        e.stopPropagation();  // Emp√™che la bascule de statut en cliquant sur supprimer
        todos.splice(index, 1); // Supprime la t√¢che du tableau
        saveTodos();
        renderTodos(filter);
      });

      // Ajout des √©l√©ments dans le li puis dans la liste
      li.appendChild(span);
      li.appendChild(editBtn);
      li.appendChild(del);
      list.appendChild(li);
    });
}

// Fonction pour modifier une t√¢che : remplace le texte par un input √©ditable
function editTask(span, index, filter) {
  const currentText = span.textContent;
  const inputEdit = document.createElement("input");
  inputEdit.type = "text";
  inputEdit.value = currentText;
  inputEdit.classList.add("edit-input");

  // Remplacer le span par l'input
  span.replaceWith(inputEdit);
  inputEdit.focus();

  // Sauvegarder la modification quand l'input perd le focus
  inputEdit.addEventListener("blur", () => {
    const newText = inputEdit.value.trim() || currentText; // Valeur nouvelle ou ancienne si vide
    todos[index].text = newText;
    saveTodos();
    renderTodos(filter);
  });

  // Sauvegarder aussi si on appuie sur Enter
  inputEdit.addEventListener("keydown", (e) => {
    if (e.key === "Enter") inputEdit.blur();
  });
}

// Gestion de la soumission du formulaire (ajout de t√¢che)
form.addEventListener("submit", e => {
  e.preventDefault();
  const text = input.value.trim();
  if (text !== "") {
    todos.push({ text, completed: false });  // Ajouter t√¢che non termin√©e
    input.value = "";                         // R√©initialiser le champ
    saveTodos();                             // Sauvegarder dans localStorage
    renderTodos();                           // Rafra√Æchir affichage
  }
});

// Ajout d'un √©couteur sur chaque bouton filtre pour changer l'affichage
filters.forEach(button => {
  button.addEventListener("click", () => {
    filters.forEach(btn => btn.classList.remove("active")); // Retirer active de tous
    button.classList.add("active");                          // Ajouter active au bouton cliqu√©
    renderTodos(button.dataset.filter);                      // Afficher selon filtre choisi
  });
});

// Afficher la liste au chargement de la page
renderTodos();
